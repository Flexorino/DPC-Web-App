/**
 * Diabetes Web-App
 * Die ist die vorl�ufige REST-artige Schnittstelle, f�r das Dia-PC Projekt. Diese Schnittstelle ist nicht REST, da sie nicht Hypermedialit�t benutzt - Das bedeutet, der Client muss selbt Anfragen konstruieren. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Grant } from '../model/grant';
import { GrantRequest } from '../model/grantRequest';
import { InlineObject2 } from '../model/inlineObject2';
import { ListedGrantAnswer } from '../model/listedGrantAnswer';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class GrantManagementService {

    protected basePath = 'https://dia-pc.flexus.click/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Bekomme alle Freigaben f�r dieses Tagebuch.
     * Nur der Verwalter des Tagebuches kann diesen Aufruf ausf�hren.
     * @param diaryId Die Id des Tagebuches.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGrantsForDiary(diaryId: string, observe?: 'body', reportProgress?: boolean): Observable<ListedGrantAnswer>;
    public getGrantsForDiary(diaryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListedGrantAnswer>>;
    public getGrantsForDiary(diaryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListedGrantAnswer>>;
    public getGrantsForDiary(diaryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (diaryId === null || diaryId === undefined) {
            throw new Error('Required parameter diaryId was null or undefined when calling getGrantsForDiary.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ListedGrantAnswer>(`${this.configuration.basePath}/diaries/${encodeURIComponent(String(diaryId))}/grants`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Bekomme alle Freigaben, die dem momentan Nutzer (identifiziert durch Authentifizierung) gegeben wurden.
     * Der gegebenen Zugriffsrechte sollten in einer Listen-artigen Struktur zur�ckgegeben werden.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMyGrantsThatWereGivenToMe(observe?: 'body', reportProgress?: boolean): Observable<ListedGrantAnswer>;
    public getMyGrantsThatWereGivenToMe(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ListedGrantAnswer>>;
    public getMyGrantsThatWereGivenToMe(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ListedGrantAnswer>>;
    public getMyGrantsThatWereGivenToMe(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ListedGrantAnswer>(`${this.configuration.basePath}/user/grants`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Einem Nutzer eine Frage f�r ein Tagebuch geben
     * Kann nur von dem Verwalter des Tagebuches gemacht werden.
     * @param diaryId Die Id des Tagebuches.
     * @param grantRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public grantAccessToUser(diaryId: string, grantRequest: GrantRequest, observe?: 'body', reportProgress?: boolean): Observable<Grant>;
    public grantAccessToUser(diaryId: string, grantRequest: GrantRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Grant>>;
    public grantAccessToUser(diaryId: string, grantRequest: GrantRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Grant>>;
    public grantAccessToUser(diaryId: string, grantRequest: GrantRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (diaryId === null || diaryId === undefined) {
            throw new Error('Required parameter diaryId was null or undefined when calling grantAccessToUser.');
        }
        if (grantRequest === null || grantRequest === undefined) {
            throw new Error('Required parameter grantRequest was null or undefined when calling grantAccessToUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Grant>(`${this.configuration.basePath}/diaries/${encodeURIComponent(String(diaryId))}/grants`,
            grantRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Entferne eine Freigabe eines Tagebuches
     * Kann nur von dem Verwalter des Tagebuches gemacht werden.
     * @param diaryId Die Id des Tagebuches.
     * @param grantId ID of the grant
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public revokeAccess(diaryId: string, grantId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public revokeAccess(diaryId: string, grantId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public revokeAccess(diaryId: string, grantId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public revokeAccess(diaryId: string, grantId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (diaryId === null || diaryId === undefined) {
            throw new Error('Required parameter diaryId was null or undefined when calling revokeAccess.');
        }
        if (grantId === null || grantId === undefined) {
            throw new Error('Required parameter grantId was null or undefined when calling revokeAccess.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/diaries/${encodeURIComponent(String(diaryId))}/grants/${encodeURIComponent(String(grantId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Aktualisiere ein Tagebuch-Freigabe
     * Die Liste der Rechte ist anpassbar. TOD: �berpr�fe, ob Rechte auch als eigene Ressource dargestellt werden sollen.
     * @param diaryId Die Id des Tagebuches.
     * @param grantId ID of the grant
     * @param inlineObject2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAccess(diaryId: string, grantId: string, inlineObject2: InlineObject2, observe?: 'body', reportProgress?: boolean): Observable<Grant>;
    public updateAccess(diaryId: string, grantId: string, inlineObject2: InlineObject2, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Grant>>;
    public updateAccess(diaryId: string, grantId: string, inlineObject2: InlineObject2, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Grant>>;
    public updateAccess(diaryId: string, grantId: string, inlineObject2: InlineObject2, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (diaryId === null || diaryId === undefined) {
            throw new Error('Required parameter diaryId was null or undefined when calling updateAccess.');
        }
        if (grantId === null || grantId === undefined) {
            throw new Error('Required parameter grantId was null or undefined when calling updateAccess.');
        }
        if (inlineObject2 === null || inlineObject2 === undefined) {
            throw new Error('Required parameter inlineObject2 was null or undefined when calling updateAccess.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Grant>(`${this.configuration.basePath}/diaries/${encodeURIComponent(String(diaryId))}/grants/${encodeURIComponent(String(grantId))}`,
            inlineObject2,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
